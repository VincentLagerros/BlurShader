local function update_unitquad_pred(self)
	--
	self.unitquad_exists = self.unitquad_exists or false

	if self.unitquad_exists == true then
		render.delete_render_target(self.effect_render_target)
	end
	--model.set_constant("/unitquad#unitquad", "resolution", vmath.vector4(render.get_window_width()*render.get_window_width()/400, render.get_window_height()*render.get_window_height()/720, 0,0)) 
	
	local color_params = { format = render.FORMAT_RGBA,
	width = render.get_window_width(),
	height = render.get_window_height(),
	min_filter = render.FILTER_LINEAR,
	mag_filter = render.FILTER_LINEAR,
	u_wrap = render.WRAP_CLAMP_TO_EDGE,
	v_wrap = render.WRAP_CLAMP_TO_EDGE }
	local depth_params = { format = render.FORMAT_DEPTH,
	width = render.get_window_width(),
	height = render.get_window_height(),
	u_wrap = render.WRAP_CLAMP_TO_EDGE,
	v_wrap = render.WRAP_CLAMP_TO_EDGE }    	



	self.effect_render_target = render.render_target("effect_render_target", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
	self.unitquad_exists = true

end

function init(self)
	self.temp_window_width = render.get_window_width()
	self.temp_window_height = render.get_window_height()

	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})


	-->
	-- todo: detect window resize, remake this
	self.unitquad_pred = render.predicate({"unitquad"})

	update_unitquad_pred(self)

	-->


	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.view = vmath.matrix4()
end


function update(self)
	if (self.temp_window_width ~= render.get_window_width()) or (self.temp_window_height ~= render.get_window_height()) then
		self.temp_window_width = render.get_window_width()
		self.temp_window_height = render.get_window_height()		
		print("updating unitquad predicate on window size update")
		update_unitquad_pred(self)
	end

	
	render.set_depth_mask(true)
	
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
	
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
	render.set_view(self.view)

	-->
	
	
		
	
	render.enable_render_target(self.effect_render_target) 
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1})
	
	render.enable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)


	render.draw(self.tile_pred) -- draw tile/sprite predicate for testing
	render.disable_render_target(self.effect_render_target) 


	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4())
	
	
	self.constants = render.constant_buffer()
	
	render.enable_texture(0, self.effect_render_target, render.BUFFER_COLOR_BIT)
	
	render.draw(self.unitquad_pred, self.constants) -- here we draw the render target to the unit quad
	
	render.disable_texture(0, self.effect_render_target, render.BUFFER_COLOR_BIT)
	
	
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
	render.set_view(self.view)	

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1000, 1000))

	--render.draw(self.tile_pred) -- note that normal tile predicate is disabled
	render.draw(self.particle_pred)
	render.draw_debug3d()

	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1000, 1000))
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)

	render.set_depth_mask(false)
	render.draw_debug2d()
--end

	
end

function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
	
	end
end
